{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # TEMPA: Territorial Energy Management with Progressive Agents\
\
## Dependencies\
```bash\
numpy>=1.19.0\
pandas>=1.2.0\
torch>=1.8.0\
pandapower>=2.6.0\
gym>=0.18.0\
matplotlib>=3.3.0\
seaborn>=0.11.0\
```\
\
## Quick Start\
1. Install dependencies:\
```bash\
pip install -r requirements.txt\
```\
\
2. Prepare data directory:\
```bash\
mkdir data\
# Place Training.csv and Testing.csv in data/\
```\
\
3. Create results directories:\
```bash\
mkdir -p results/data results/models results/logs\
```\
\
## Training\
Run the main training script:\
```bash\
python sac_agent_12.py\
```\
Training progress will be logged to `results/logs/` and models saved to `results/models/`.\
\
## Testing\
1. First, generate testing results:\
```bash\
python Testing_Decentralized_agents.py\
```\
\
2. Generate visualization plots:\
```bash\
python Voltage_plots.py\
python var_plots.py\
python Soc_plots.py\
```\
\
3. Analyze training rewards:\
```bash\
python Reward_plots.py\
```\
\
## Data Format\
Training/Testing CSV files require:\
- `Demand`: Normalized load profile [0.0-1.0]\
- `Solar`: Normalized PV generation [0.0-1.0]\
- 48 timesteps per day (30-minute intervals)\
\
## Project Structure\
```\
project/\
\uc0\u9500 \u9472 \u9472  data/\
\uc0\u9474    \u9500 \u9472 \u9472  Training.csv\
\uc0\u9474    \u9492 \u9472 \u9472  Testing.csv\
\uc0\u9500 \u9472 \u9472  results/\
\uc0\u9474    \u9500 \u9472 \u9472  data/\
\uc0\u9474    \u9500 \u9472 \u9472  models/\
\uc0\u9474    \u9492 \u9472 \u9472  logs/\
\uc0\u9500 \u9472 \u9472  grid_env_14.py\
\uc0\u9500 \u9472 \u9472  sac_agent_12.py\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \uc0\u9500 \u9472 \u9472  analyze_results.py\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \uc0\u9492 \u9472 \u9472  testing/\
    \uc0\u9500 \u9472 \u9472  Testing_Decentralized_agents.py\
    \uc0\u9500 \u9472 \u9472  Voltage_plots.py\
    \uc0\u9500 \u9472 \u9472  var_plots.py\
    \uc0\u9500 \u9472 \u9472  Soc_plots.py\
    \uc0\u9492 \u9472 \u9472  Reward_plots.py\
```\
\
## Notes\
- Default training runs for 5000 episodes\
- Curriculum learning transitions at episode 300\
- Testing evaluates performance over 15-day period\
- GPU acceleration automatically used if available\
\
For detailed implementation information, refer to the documentation in each source file.}